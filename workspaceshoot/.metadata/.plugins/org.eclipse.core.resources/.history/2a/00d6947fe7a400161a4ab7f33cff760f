package rajeshwari.codes.shootBall;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

public  class  GameJPanel extends JPanel {
	private static final long serialVersionUID = 2141241432423423L;
	private static final int BLOCK_WIDTH = 40;
	private static final int BLOCK_HEIGHT = 40;
	private Tankershooter tankershooter;
	private Ball ball;
	private Blocks block1;
	private Blocks block2;

	public GameJPanel(){
		super();
	}

	public void init() {
		tankershooter= new Tankershooter();
		ball= new Ball();
		block1 = new Blocks(
				getWidth() - BLOCK_WIDTH,
				getHeight() - BLOCK_HEIGHT,
				BLOCK_HEIGHT,
				BLOCK_WIDTH);

		block2 = new Blocks(
				getWidth() - BLOCK_WIDTH,
				getHeight() - 2*BLOCK_HEIGHT,
				BLOCK_HEIGHT,
				BLOCK_WIDTH);
		block2.setColor(Color.red);
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D g2d = (Graphics2D)g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
//		try {
//			tankershooter.draw(g2d, this);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		ball.draw(g2d);
		block1.draw(g2d);
		block2.draw(g2d);
	}

	public GameResult update() {
		boolean hasLost = ball.moveBall(getHeight(), getWidth());
		if (isCollided()) {
			// ball collision.
			return GameResult.WON;
		}
		return GameResult.IN_FLIGHT;
	}
	
	private boolean isCollided() {
		double ballRightX = ball.getX() + Ball.WIDTH;
		double ballRightY = ball.getY() + Ball.HEIGHT / 2;
		double ballLeftX = ball.getX();
		double ballLeftY = ball.getY() + Ball.HEIGHT / 2;
		double balldownX = ball.getX() + Ball.WIDTH / 2;
		double balldownY = ball.getY() + Ball.HEIGHT;
		double ballupX = ball.getX() + Ball.WIDTH / 2; 
		double ballupY= ball.getY();
		
		double blockRightSideY=0;
		
		double blockupX=0;
		
		// if right ball x lies in between block leftx and rightx then collided
		List<Blocks> blockList = new ArrayList<>();
		blockList.add(block1);
		blockList.add(block2);
		for (Blocks block : blockList) {
			if (isBetween(ballRightX, block.getX(), block.getX() + BLOCK_WIDTH)
					&& isBetween(ballRightY, block.getY(), block.getY() + BLOCK_HEIGHT)) {
				return true;
			}
			if (isBetween(ballLeftX, block.getX(), block.getX() + BLOCK_WIDTH)
					&& isBetween(ballLeftY, block.getY(), block.getY() + BLOCK_HEIGHT)) {
				return true;
			}
			if (isBetween(balldownX, block.getX(), block.getX() + BLOCK_WIDTH) 
					&& isBetween(balldownY, block.getY(),block.getY()+ BLOCK_HEIGHT)) {
				return true;
			}
			if (isBetween(ballupX, block.getX(), block.getX() + BLOCK_WIDTH) 
						&& isBetween(ballupY, block.getY(),block.getY()+ BLOCK_HEIGHT)){
					return true;
			}
			if(isBetween(blockRightSideY, block.getY(),block.getY() + BLOCK_HEIGHT) && 
					distanceBetweenTwoPoints(block.getX()+BLOCK_WIDTH, ballCentreX, blockRightSideY, ballCentreY)<WIDTH /2){
				return true;
				
			} // block right side overlapping check
			if(isBetween(blockupX, block.getX(), block.getX() + BLOCK_WIDTH) && 
					distanceBetweenTwoPoints(blockupX, ballCentreX, block.getY(), ballCentreY)<HEIGHT/2 ){
				return true;
			} // block up side overlapping check
			if(isBetween(blockRightSideY, block.getY(),block.getY() + BLOCK_HEIGHT) && 
					distanceBetweenTwoPoints(block.getX(), ballCentreX, blockRightSideY, ballCentreY)<WIDTH /2){
				return true;
			} // block left side overlapping check
		}
		return false;
	}
	private boolean isOverlapped(){
		double ballCentreX = ball.getX() + Ball.WIDTH / 2;
		double ballCentreY= ball.getY() + Ball.HEIGHT /2;
		for( double y=block1.getY(); y<=block1.getY() + BLOCK_HEIGHT; y++ ){
			if(distanceBetweenTwoPoints(block1.getX()+BLOCK_WIDTH, ballCentreX, y, ballCentreY) < Ball.WIDTH / 2)
				return true;
		}
		return false;
	}

	private boolean isBetween(double x, double n1, double n2) {
		System.out.println(x + "Checking Between" + n1 + " " + n2);
		if(x>n1 && x<n2){
			return true;
		}
		if(x>n2 && x<n1){
			return true;
		}
		return false;
	}
	private  double distanceBetweenTwoPoints(double x1, double x2, double y1, double y2){
		double distance= Math.sqrt((x2-x1)*(x2-x1)+ (y2-y1)*(y2-y1));
		return distance;
	}
}
